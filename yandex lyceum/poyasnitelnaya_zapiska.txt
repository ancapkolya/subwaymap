SUBWAYMAP
Тумаков Николай

Идея заключается в том, что игрок должен построить своё метро, 
а также следить за бюджетом и перегруженностью станций. 
Игрок может строить станции, затем линии, создавать маршруты, 
изменять количество поездов на маршруте и смотреть статистику 
маршрута или отдельной станции.

Классов много. GameLoop, Window, Session, ActionData, AutoTextRender, WrappedClock, переопределенный 
из pygame-gui Manager. также классы таблиц в бд, представляющие объекты в игре например GameSession, Station и так далее. Из спрайтов у меня MapSprite, ImageSprite, MessageBox, Station (находятся в разных файлах, 
не то же самое что Station как модель в бд), BreakPoint, Line, Route, RoutePaginator, переопределенный Button. 

Интересные на мой взгляд приемы: 
1. Я создал класс GameLoop и Window для того, чтобы быстро переключаться между окнами, так как в класс 
Window переданы все группы и ui_manager и т д.
2. Я создал класс AutoTextRender для выборочной отрисовки текста. Список экземпляров этого класса передается 
в Window. Также есть метод add_text_stream, который позволяет создать текст, который будет отображать результат функции
3. Я создал класс ActionData, который хранит информацию о текущем действии пользователя и позволяет
обрабатывать цепочку кликов и временно хранить спрайты и объекты с возможностью отката к первоначальному состоянию c кнопки cancel
4. Я переопределил класс Manager и Button из pygame-gui для добавления удобного способа обработки кликов,
с помощью именнованного параметра и передачи объекта функции.
5. Я использовал numpy для создания и взаимодействия с картой для ускорения работы программы.
6. Если я правильно помню для игры в ТЗ было требование об обработке нажатия клавиш. я добавил комбинацию
ctrl+s для сохранения игры и ctrl+n для создания игры в главном меню.
7. Я переопределил класс Model из peewee и создал JsonModel. этот класс позволяет сохранять в бд словари и 
списки. Для этого надо в классе Meta модели указать переменную json_fields. это работает так: сначало надо
вызвать метод load_data тогда мтрока превращается в список. в момент сохранения список снова превращается в
словарь.
8. Я создал класс MessageBox для вывода уведомлений пользователю.
9. Скорость перемещения поездов задается так: сначало поезд появляется на станции. Это столкновение спрайтов.
поезд вызывает метод get_next_station класса Session, получает id станции. Проверяет этот id в словаре станции и получает 
скорость, кторая приведет его к следующей станции или к BreakPoint, у которого тоже есть словарь с напрваленями.
10. Ведется подсчет счета. результат пользователя - суммарный пассажиропоток.

Библиотеки:
1. pygame
2. pygame-gui
3. peewee
4. numpy
5. json
6. os
7. sys
8. datetime
9. random

версия со скриншотами и нормальным форматированиям на гугл диске: https://docs.google.com/document/d/1DpPx8EMgKyqe8HGYUX6P_FCHt_vDIWOioi0R4MDOdbA/edit?usp=sharing
